
# Import required libraries
import tarfile
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import os
import re
import shutil
import string

# Download and extract the IMDB dataset
url = "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
filepath = tf.keras.utils.get_file("aclImdb_v1.tar.gz", url)
with tarfile.open(filepath, "r:gz") as tar:
    tar.extractall(path=os.path.dirname(filepath))

dataset_dir = os.path.join(os.path.dirname(filepath), 'aclImdb')
print("Dataset directory contents:", os.listdir(dataset_dir))
train_dir = os.path.join(dataset_dir, "train")

# Remove the 'unsup' folder (not labeled) if it exists
unsup_dir = os.path.join(train_dir, "unsup")
if os.path.exists(unsup_dir):
    shutil.rmtree(unsup_dir)

# Dataset parameters
batch_size = 128
seed = 42

# Load datasets
raw_train_ds = tf.keras.utils.text_dataset_from_directory(
    train_dir, batch_size=batch_size, validation_split=0.2, subset='training', seed=seed)

raw_val_ds = tf.keras.utils.text_dataset_from_directory(
    train_dir, batch_size=batch_size, validation_split=0.2, subset='validation', seed=seed)

raw_test_ds = tf.keras.utils.text_dataset_from_directory(
    os.path.join(dataset_dir, "test"), batch_size=batch_size)

# Prefetch for performance
AUTOTUNE = tf.data.AUTOTUNE
train_ds = raw_train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = raw_val_ds.cache().prefetch(buffer_size=AUTOTUNE)
test_ds = raw_test_ds.cache().prefetch(buffer_size=AUTOTUNE)

# Custom text standardization function
def custom_standardization(input_data):
    lowercase = tf.strings.lower(input_data)
    stripped_html = tf.strings.regex_replace(lowercase, '<br />', ' ')
    return tf.strings.regex_replace(stripped_html, f'[{re.escape(string.punctuation)}]', '')

# Vectorization layer
max_features = 10000
sequence_length = 250
vectorize_layer = tf.keras.layers.TextVectorization(
    standardize=custom_standardization,
    max_tokens=max_features,
    output_mode='int',
    output_sequence_length=sequence_length)

# Adapt vectorizer to training data
vectorize_layer.adapt(raw_train_ds.map(lambda x, y: x))

# Define the model
model = tf.keras.Sequential([
    vectorize_layer,
    tf.keras.layers.Embedding(
        input_dim=len(vectorize_layer.get_vocabulary()),
        output_dim=64,
        mask_zero=True),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64, return_sequences=True)),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

# Compile the model
model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.Adam(1e-4),
              metrics=['accuracy'])

# Model summary
model.summary()

# Train the model
history = model.fit(train_ds, epochs=10, validation_data=val_ds, validation_steps=30)

# Plotting function
def plot_graphs(history, metric):
    plt.plot(history.history[metric])
    plt.plot(history.history['val_' + metric])
    plt.xlabel("Epochs")
    plt.ylabel(metric)
    plt.legend([metric, 'val_' + metric])
    plt.grid(True)

# Plot accuracy and loss
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plot_graphs(history, 'accuracy')
plt.ylim(0, 1)

plt.subplot(1, 2, 2)
plot_graphs(history, 'loss')
plt.ylim(0, None)

plt.tight_layout()
plt.show()

# Evaluate on test set
test_loss, test_acc = model.evaluate(test_ds)
print('Test Loss:', test_loss)
print('Test Accuracy:', test_acc)

# Predict sentiment on new samples
samples = np.array([
    'The movie was awesome, wonderful and amazing.',
    'The movie is bad and a waste of time.'
])

sample_ds = tf.data.Dataset.from_tensor_slices(samples).batch(1)
predictions = model.predict(sample_ds)
probabilities = tf.sigmoid(predictions).numpy()

for i, prob in enumerate(probabilities):
    sentiment = "Positive" if prob[0] >= 0.5 else "Negative"
    print(f"Review: {samples[i]}")
    print(f"Sentiment: {sentiment} (Confidence: {prob[0]:.4f})\n")
