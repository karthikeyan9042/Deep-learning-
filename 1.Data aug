
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import cifar10

train_ds, test_ds = cifar10.load_data()
train_ds = tf.data.Dataset.from_tensor_slices(train_ds)

def show_images(images):
    n = len(images)
    for i, image in enumerate(images):
        plt.subplot(1, n, i + 1)
        plt.imshow(tf.squeeze(image))
        plt.axis("off")
    plt.show()

IMG_SIZE = 32
resize_and_rescale = tf.keras.Sequential([
    tf.keras.layers.Resizing(IMG_SIZE, IMG_SIZE),
    tf.keras.layers.Rescaling(1/256)
])

resized_images = train_ds.take(4).map(lambda x, y: resize_and_rescale(x))
show_images(resized_images)

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip(),
    tf.keras.layers.RandomRotation(factor=.2),
    tf.keras.layers.RandomContrast(factor=(.2, .9)),
])

aug_images = resized_images.map(lambda x: data_augmentation(x))
show_images(aug_images)

AUTOTUNE = tf.data.AUTOTUNE

def prepare(ds):
    ds = ds.map(lambda x, y: (resize_and_rescale(x), y), num_parallel_calls=AUTOTUNE)
    ds = ds.map(lambda x, y: (data_augmentation(x), y), num_parallel_calls=AUTOTUNE)
    return ds.prefetch(buffer_size=AUTOTUNE)

prepared_ds = prepare(train_ds.take(4))
show_images(prepared_ds.map(lambda x, y: x))


image, label = next(iter(train_ds))

show_images([
    tf.image.flip_left_right(image),
    tf.image.flip_up_down(image),
    tf.image.adjust_brightness(image, -.2),
    tf.image.adjust_contrast(image, 2),
    tf.image.adjust_saturation(image, 2),
])

show_images([
    tf.image.stateless_random_contrast(image, lower=.1, upper=5, seed=(i, 0))
    for i in range(1, 6)
])

show_images([
    tf.image.stateless_random_brightness(image, max_delta=.8, seed=(i, 0))
    for i in range(1, 6)
])
